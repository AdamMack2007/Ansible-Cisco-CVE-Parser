#!/usr/bin/python
class FilterModule(object):
    def filters(self):
        return {'cve_mapping': self.get_cve_mapping}

    def get_cve_mapping(self, data, os):
        '''Creates dict mapping based on OS as root level, version of the OS as sub-level and list of vulnerabilities that affect the version of OS
        Example ouput can be found in files/cve_mapping_example.json
        '''
        cve_dict = {}
        # Create OS passed in as the root level dict
        cve_dict[os] = {}

        for result in data['results']:
            for cve in result['json']['advisories']:
                version = cve['iosRelease'][0]
                if version not in cve_dict[os]:
                    cve_dict[os][version] = {}
                if 'data' not in cve_dict[os][version]:
                    cve_dict[os][version]['data'] = []

                # Create another dictionary to contain the various amounts of CVE data
                cve_info = {}
                cve_info['cves'] = cve['cves']
                cve_info['title'] = cve['advisoryTitle']
                cve_info['severity'] = cve['sir']
                cve_info['url'] = cve['publicationUrl']
                cve_info['cvss_score'] = cve['cvssBaseScore']
                # Nexus breaks it out on hardware (3k vs 7k vs 9k). Only searching for 9k
                if 'platforms' in cve:
                    for platform in cve['platforms']:
                        if 'Nexus 9000' in platform['name']:
                            cve_info['fixed_version'] = platform['firstFixes'][0]['name']
                        else:
                            # Create empty value to keep a uniform dictionary
                            cve_info['fixed_version'] = ''
                else:
                    cve_info['fixed_version'] = cve['firstFixed']
                # Append the new dictionary to the main dictionary (cve_dict)
                cve_dict[os][version]['data'].append(cve_info)

        return cve_dict
